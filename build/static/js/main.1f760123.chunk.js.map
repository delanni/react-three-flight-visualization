{"version":3,"sources":["constants.ts","models/Globe.tsx","models/Plane.tsx","Utilities.tsx","flightsScene/Flight.tsx","flightsScene/Sun.tsx","flightsScene/Airport.tsx","flightsScene/FlightsScene.tsx","components/FilterControls.tsx","components/SimulationControls.tsx","FlightVisualizationApp.tsx","index.tsx"],"names":["LEFT","Vector3","UP","GLOBE_SCALE","PLANE_ROOT_NODE_ROTATION","PLANE_ROOT_NODE_POSITION","PATH_TO_MODEL","GLOBE_BASE_RADIUS","Globe","props","group","useRef","useGLTF","nodes","materials","scale","ref","dispose","name","geometry","Earth_Surfacemat_0","material","userData","preload","hotPinkMaterial","THREE","emissive","emissiveIntensity","Plane","position","rotation","mesh_0","selected","color_10988977","mesh_1","color_15277357","mesh_2","color_16448250","mesh_3","color_2829873","Box","args","size","opacity","color","rotationQuaternionForCoordinates","lat","long","q1","Quaternion","setFromAxisAngle","degToRad","multiply","padLeft0","n","toString","padStart","prettyDate","memoizeWith","e","toISOString","date","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","timestamp","Math","floor","parseFlightDates","flight","departureTime","Date","arrivalTime","getRotationForDirection","from","to","latitude","longitude","latitudeSign","sign","longitudeSign","latLongSignature","base","PI","abs","Flight","onFlightClicked","rotationBoxRef","flightContainerRef","useFrame","state","delta","globalWorldTime","clock","hackedWorldTime","startQuaternion","endQuaternion","current","phase","startTimestamp","endTimestamp","currentTimestamp","shouldLimit","fullRange","currentProgress","min","max","calculatePhase","Number","worldPositionBefore","getWorldPosition","rotationQuaternion","slerpQuaternions","setRotationFromQuaternion","lookAt","z","position-y","onClick","event","ORBIT_PERIOD_24H","Sun","phaseRadians","x","sin","cos","set","Sphere","baseColor","intensity","reference","EARTH_SURFACE_ELEVATION","LIGHT_POSITION","CITY_POSTION","Airport","lightRef","useState","hover","setHover","random","r","airport","blinkPeriod","elapsedTime","quaternion","Html","className","onPointerOver","onPointerOut","city","id","target","href","FlightsScene","flightsList","airportsMap","airportsList","setSelectedFlight","selectedFlight","simulationSpeed","onSimulationMinuteTick","worldTimeMs","now","worldTimeAfterTick","OrbitControls","map","departureAirportId","arrivalAirportId","FlightFilterControls","flights","airports","airportMap","onFilteringChanged","simulationTime","maxFlightCount","departureFilter","setDepartureFilter","arrivalFilter","setArrivalFilter","flightIdFilter","setFlightIdFilter","activeFlightFilter","setActiveFlightFilter","filteredFlights","setFilteredFlights","useEffect","filtered","filter","includes","worldTime","isInFlightNow","slice","type","value","onChange","checked","idx","classNames","join","SimulationSpeedControl","onSimulationSpeedChange","speed","setSpeed","step","spd","SimulationSizeControl","onMaxFlightCountChange","flightCount","setFlightCount","count","FlightVisualizationApp","setFlightsList","setAirportsMap","setAirportList","fetch","then","airportsResponse","json","airportsJson","indexBy","flightsResponse","flightsJson","setMaxFlightCount","setSimulationSpeed","setSimulationTime","Suspense","fallback","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f760123.chunk.js","sourcesContent":["import { Vector3 } from 'three';\nimport { Number3 } from './types';\nimport { GLOBE_BASE_RADIUS } from './models/Globe';\n\nexport const LEFT = new Vector3(-1, 0, 0);\nexport const UP = new Vector3(0, 1, 0);\nexport const RIGHT = new Vector3(1, 0, 0);\n\nexport const GLOBE_SCALE = 1 / 20;\nexport const FLOAT_HEIGHT = 1 / 20;\n\nexport const PLANE_SCALE = 1 / 300;\n\nexport const EARTH_SURFACE_HEIGHT = GLOBE_BASE_RADIUS * GLOBE_SCALE;\nexport const MAP_TOP: Number3 = [0, EARTH_SURFACE_HEIGHT + FLOAT_HEIGHT, 0];\n\nexport const PLANE_ROOT_NODE_ROTATION: Number3 = [0, 3.14, 2.77];\nexport const PLANE_ROOT_NODE_POSITION: Number3 = [10.3, -24.2, 6.4];\n","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nauthor: nenjo (https://sketchfab.com/nenjo)\nlicense: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)\nsource: https://sketchfab.com/models/8a3f6e66955e41d48762d75725d3ab52\ntitle: Earth\n*/\n\nimport * as THREE from 'three';\nimport React, { useRef } from 'react';\nimport { useGLTF } from '@react-three/drei';\nimport { GLTF } from 'three-stdlib';\nimport { GLOBE_SCALE } from '../constants';\n\ntype GLTFResult = GLTF & {\n  nodes: {\n    Earth_Surfacemat_0: THREE.Mesh;\n  };\n  materials: {\n    ['Surface.mat']: THREE.MeshStandardMaterial;\n  };\n};\n\nconst PATH_TO_MODEL = '/models/globe/globe.gltf';\n\nexport const GLOBE_BASE_RADIUS = 42.0;\n\nexport default function Globe({ ...props }: JSX.IntrinsicElements['group']) {\n  const group = useRef<THREE.Group>();\n  const { nodes, materials } = useGLTF(PATH_TO_MODEL) as GLTFResult;\n  return (\n    <group scale={GLOBE_SCALE} ref={group} {...props} dispose={null}>\n      <mesh\n        name=\"Earth_Surfacemat_0\"\n        geometry={nodes.Earth_Surfacemat_0.geometry}\n        material={materials['Surface.mat']}\n        userData={{ name: 'Earth_Surface.mat_0' }}\n      />\n    </group>\n  );\n}\n\nuseGLTF.preload(PATH_TO_MODEL);\n","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nauthor: Yo Boy (https://sketchfab.com/jratanatharathorn)\nlicense: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)\nsource: https://sketchfab.com/3d-models/aeroplane-ea761da1a27149619794d963580c7ecd\ntitle: Aeroplane\n*/\n\nimport * as THREE from 'three';\nimport React, { useRef } from 'react';\nimport { Html, useGLTF } from '@react-three/drei';\nimport { GLTF } from 'three-stdlib';\nimport { PLANE_ROOT_NODE_POSITION, PLANE_ROOT_NODE_ROTATION, PLANE_SCALE } from '../constants';\n\ntype GLTFResult = GLTF & {\n  nodes: {\n    mesh_0: THREE.Mesh;\n    mesh_1: THREE.Mesh;\n    mesh_2: THREE.Mesh;\n    mesh_3: THREE.Mesh;\n  };\n  materials: {\n    color_10988977: THREE.MeshStandardMaterial;\n    color_15277357: THREE.MeshStandardMaterial;\n    color_16448250: THREE.MeshStandardMaterial;\n    color_2829873: THREE.MeshStandardMaterial;\n  };\n};\n\nconst PATH_TO_MODEL = '/models/plane/plane.gltf';\n\nconst hotPinkMaterial = new THREE.MeshStandardMaterial({\n  emissive: 'hotpink',\n  emissiveIntensity: 2.0,\n});\n\nexport default function Plane({ ...props }: JSX.IntrinsicElements['group'] & { selected: boolean }) {\n  const group = useRef<THREE.Group>();\n  const { nodes, materials } = useGLTF(PATH_TO_MODEL) as GLTFResult;\n  return (\n    <group scale={PLANE_SCALE} ref={group} {...props} dispose={null}>\n      <group\n        position={PLANE_ROOT_NODE_POSITION}\n        rotation={PLANE_ROOT_NODE_ROTATION}\n        name=\"tinkerobjcleanermaterialmergergles\"\n        userData={{ name: 'tinker.obj.cleaner.materialmerger.gles' }}\n      >\n        <mesh\n          name=\"mesh_0\"\n          geometry={nodes.mesh_0.geometry}\n          material={props.selected ? hotPinkMaterial : materials.color_10988977}\n        />\n        <mesh name=\"mesh_1\" geometry={nodes.mesh_1.geometry} material={materials.color_15277357} />\n        <mesh name=\"mesh_2\" geometry={nodes.mesh_2.geometry} material={materials.color_16448250} />\n        <mesh name=\"mesh_3\" geometry={nodes.mesh_3.geometry} material={materials.color_2829873} />\n      </group>\n    </group>\n  );\n}\n\nuseGLTF.preload(PATH_TO_MODEL);\n","import React from 'react';\nimport { Quaternion, Vector3 } from 'three';\nimport { memoizeWith } from 'ramda';\nimport { LEFT, UP } from './constants';\nimport { degToRad } from 'three/src/math/MathUtils';\nimport { IFlight } from './types';\n\nexport function Box(\n  props: React.PropsWithChildren<{\n    position: [x: number, y: number, z: number];\n    size?: [number, number, number];\n    color?: string;\n    onPointerOver?: () => void;\n    onPointerOut?: () => void;\n  }>\n) {\n  return (\n    <mesh {...props} scale={1}>\n      <boxGeometry args={[props.size?.[0] || 1, props.size?.[1] || 1, props.size?.[2] || 1]} />\n      <meshStandardMaterial opacity={1} color={props.color} />\n    </mesh>\n  );\n}\n\nexport function quaternionToAlignVectors(v1: Vector3, v2: Vector3): Quaternion {\n  const v1Norm = v1.clone().normalize();\n  const v2Norm = v2.clone().normalize();\n  const planeNormal = v1Norm.clone().cross(v2Norm).normalize();\n  const rotationAngle = Math.acos(v1Norm.clone().dot(v2Norm));\n  return new Quaternion().setFromAxisAngle(planeNormal, rotationAngle);\n}\n\nexport function rotationQuaternionForCoordinates(lat: number, long: number): Quaternion {\n  const q1 = new Quaternion().setFromAxisAngle(LEFT, degToRad(lat - 90)); //latitude\n  const q2 = new Quaternion().setFromAxisAngle(UP, degToRad(long)); //longitude\n  return q2.multiply(q1);\n}\n\nconst padLeft0 = (n: number) => n.toString().padStart(2, '0');\nexport const prettyDate = memoizeWith(\n  (e) => e.toISOString(),\n  (date: Date) => {\n    const month = padLeft0(date.getMonth() + 1);\n    const day = padLeft0(date.getDate());\n    const hours = padLeft0(date.getHours());\n    const minutes = padLeft0(date.getMinutes());\n    return `${month}/${day} ${hours}:${minutes}`;\n  }\n);\n\nexport const getMinutes = (timestamp: number) => Math.floor(timestamp / 60000);\n\nexport function parseFlightDates(flight: any): IFlight {\n  return {\n    ...flight,\n    departureTime: new Date(flight.departureTime),\n    arrivalTime: new Date(flight.arrivalTime),\n  };\n}\n\nexport const getRotationForDirection = memoizeWith(\n  (from, to) => `${from.latitude},${from.longitude};${to.latitude},${to.longitude}`,\n  (from: { latitude: number; longitude: number }, to: { latitude: number; longitude: number }) => {\n    const latitudeSign = Math.sign(to.latitude - from.latitude);\n    const longitudeSign = Math.sign(to.longitude - from.longitude);\n    const latLongSignature = `${latitudeSign};${longitudeSign}`;\n\n    const base = Math.PI;\n    let rotation =\n      {\n        '1;1': base + Math.PI,\n        '-1;1': base,\n        '-1;-1': base,\n        '1;-1': base + Math.PI,\n      }[latLongSignature] || base;\n\n    if (Math.abs(to.latitude - from.latitude) < 1) {\n      rotation += Math.PI / 2;\n    }\n\n    return rotation;\n  }\n);\n","import { useRef } from 'react';\nimport { Group, Quaternion, Vector3 } from 'three';\nimport { ThreeEvent, useFrame } from '@react-three/fiber';\n\nimport Airplane from '../models/Plane';\nimport { FLOAT_HEIGHT, GLOBE_SCALE, LEFT, MAP_TOP } from '../constants';\nimport { GLOBE_BASE_RADIUS } from '../models/Globe';\n\nimport { IAirport, IFlight } from '../types';\nimport { getRotationForDirection, rotationQuaternionForCoordinates } from '../Utilities';\n\ntype FlightProperties = {\n  from: IAirport;\n  to: IAirport;\n  flight: IFlight;\n  onFlightClicked: (flight: IFlight, event: ThreeEvent<MouseEvent>) => void;\n  selected: boolean;\n};\n\nexport function Flight({ from, to, flight, selected, onFlightClicked }: FlightProperties) {\n  const rotationBoxRef = useRef<Group>();\n  const flightContainerRef = useRef<Group>();\n\n  useFrame((state, delta) => {\n    const globalWorldTime: number = (state.clock as any).hackedWorldTime;\n    const startQuaternion = rotationQuaternionForCoordinates(from.latitude, from.longitude);\n    const endQuaternion = rotationQuaternionForCoordinates(to.latitude, to.longitude);\n\n    if (rotationBoxRef.current && flightContainerRef.current) {\n      const phase = calculatePhase(Number(flight.departureTime), Number(flight.arrivalTime), globalWorldTime);\n      const worldPositionBefore = flightContainerRef.current.getWorldPosition(new Vector3());\n\n      const rotationQuaternion = new Quaternion();\n      rotationQuaternion.slerpQuaternions(startQuaternion, endQuaternion, phase);\n      rotationBoxRef.current.setRotationFromQuaternion(rotationQuaternion);\n\n      flightContainerRef.current.lookAt(worldPositionBefore);\n      // .lookAt only sets x/y rotation, it screws up Z, but we can reset it\n      flightContainerRef.current.rotation.z = getRotationForDirection(from, to)!;\n    }\n  });\n\n  return (\n    <group ref={rotationBoxRef}>\n      <group ref={flightContainerRef} position-y={GLOBE_BASE_RADIUS * GLOBE_SCALE + FLOAT_HEIGHT}>\n        {/* ^ This box is a convenience because it's hard to forward ref to inside the airplane */}\n        <Airplane selected={selected} onClick={(event) => onFlightClicked(flight, event)} />\n      </group>\n    </group>\n  );\n}\n\nfunction calculatePhase(\n  startTimestamp: number,\n  endTimestamp: number,\n  currentTimestamp: number,\n  shouldLimit: boolean = true\n) {\n  const fullRange = endTimestamp - startTimestamp;\n  const currentProgress = currentTimestamp - startTimestamp;\n  if (shouldLimit) {\n    return Math.min(1, Math.max(0, currentProgress / fullRange));\n  } else {\n    return currentProgress / fullRange;\n  }\n}\n","import React, { useRef } from 'react';\nimport { PointLight } from 'three';\nimport { useFrame } from '@react-three/fiber';\n\nconst ORBIT_PERIOD_24H = 24 * 60 * 60 * 1000;\nconst ORBIT_DISTANCE = 10;\nexport default function Sun() {\n  const ref = useRef<PointLight>();\n\n  useFrame((state, delta) => {\n    const time = (state.clock as any).hackedWorldTime;\n    const phase = (time % ORBIT_PERIOD_24H) / ORBIT_PERIOD_24H;\n    const phaseRadians = Math.PI * 2 * phase + Math.PI;\n\n    if (ref.current) {\n      const x = Math.sin(phaseRadians) * ORBIT_DISTANCE;\n      const z = Math.cos(phaseRadians) * ORBIT_DISTANCE;\n      ref.current.position.set(x, 0, z);\n    }\n  });\n\n  return (\n    <group ref={ref} position={[0, 0, ORBIT_DISTANCE]}>\n      <Sphere baseColor={'yellow'} position={[1, 0, 1]} />\n      <pointLight intensity={5.0} />\n    </group>\n  );\n}\n\nfunction Sphere(\n  props: React.PropsWithChildren<{ position: [x: number, y: number, z: number]; baseColor: string; reference?: any }>\n) {\n  return (\n    <mesh {...props} ref={props.reference}>\n      <sphereGeometry args={[0.1]} />\n      <meshStandardMaterial color={props.baseColor} />\n    </mesh>\n  );\n}\n","import React, { useRef, useState } from 'react';\nimport { Group, PointLight } from 'three';\nimport { Html } from '@react-three/drei';\n\nimport { GLOBE_SCALE } from '../constants';\nimport { GLOBE_BASE_RADIUS } from '../models/Globe';\nimport { Box, rotationQuaternionForCoordinates } from '../Utilities';\n\nimport { IAirport, Number3 } from '../types';\nimport { useFrame } from '@react-three/fiber';\n\nconst EARTH_SURFACE_ELEVATION = GLOBE_BASE_RADIUS * GLOBE_SCALE;\n\nconst LIGHT_POSITION: Number3 = [0, EARTH_SURFACE_ELEVATION + 0.04, 0];\nconst CITY_POSTION: Number3 = [0, EARTH_SURFACE_ELEVATION, 0];\n\nexport default function Airport(props: { airport: IAirport }) {\n  const rotationBoxRef = useRef<Group>();\n  const lightRef = useRef<PointLight>();\n  const [hover, setHover] = useState<boolean>(false);\n  const [r] = useState(Math.random());\n\n  const rotationQuaternion = rotationQuaternionForCoordinates(props.airport.latitude, props.airport.longitude);\n\n  useFrame((state, delta) => {\n    if (lightRef.current) {\n      const blinkPeriod = 3 + r;\n      const phase = (state.clock.elapsedTime % blinkPeriod) / blinkPeriod;\n      if (hover) {\n        lightRef.current.intensity = 3;\n      } else {\n        lightRef.current.intensity = Math.sin(phase * Math.PI * 2) * 0.5 + 0.5;\n      }\n    }\n  });\n\n  return (\n    <group ref={rotationBoxRef} quaternion={rotationQuaternion}>\n      {hover ? (\n        <Html position-y={EARTH_SURFACE_ELEVATION}>\n          <div className=\"info-bubble\" onPointerOver={() => setHover(true)} onPointerOut={() => setHover(false)}>\n            <div>[{props.airport.city}]</div>\n            <div>{props.airport.id} </div>\n            <div>\n              ({props.airport.latitude};{props.airport.longitude})\n            </div>\n            <a target={'_blank'} href={`https://en.wikipedia.org/wiki/${props.airport.city}`}>\n              wikipedia\n            </a>\n          </div>\n        </Html>\n      ) : null}\n      <Box\n        onPointerOver={() => setHover(true)}\n        onPointerOut={() => setHover(false)}\n        size={[0.05, 0.05, 0.05]}\n        color={hover ? 'limegreen' : 'red'}\n        position={CITY_POSTION}\n      />\n      <Sphere position={LIGHT_POSITION} baseColor={hover ? 'limegreen' : 'red'} />\n      <pointLight ref={lightRef} color={hover ? 'limegreen' : 'red'} position={LIGHT_POSITION} />\n    </group>\n  );\n}\n\nfunction Sphere(\n  props: React.PropsWithChildren<{ position: [x: number, y: number, z: number]; baseColor: string; reference?: any }>\n) {\n  return (\n    <mesh {...props} ref={props.reference}>\n      <sphereGeometry args={[0.01]} />\n      <meshStandardMaterial color={props.baseColor} />\n    </mesh>\n  );\n}\n","import { OrbitControls } from '@react-three/drei';\nimport React from 'react';\nimport Globe from '../models/Globe';\nimport { Flight } from './Flight';\nimport Sun from './Sun';\nimport { Dictionary, IAirport, IFlight } from '../types';\nimport Airport from './Airport';\nimport { useFrame } from '@react-three/fiber';\nimport { getMinutes } from '../Utilities';\n\ntype FlightsSceneProps = {\n  flightsList: IFlight[];\n  airportsMap: Dictionary<IAirport>;\n  airportsList: IAirport[];\n  setSelectedFlight: (flight: IFlight) => void;\n  selectedFlight: IFlight | null;\n  simulationSpeed: number;\n  onSimulationMinuteTick: (timestamp: number) => void;\n};\n\nexport default function FlightsScene({\n  flightsList,\n  airportsMap,\n  airportsList,\n  setSelectedFlight,\n  selectedFlight,\n  simulationSpeed,\n  onSimulationMinuteTick,\n}: FlightsSceneProps) {\n  useFrame((state, delta) => {\n    const clock = state.clock as any;\n    const worldTimeMs = clock.hackedWorldTime || Date.now();\n    const worldTimeAfterTick = worldTimeMs + Math.floor(delta * 1000 * simulationSpeed);\n    clock.hackedWorldTime = worldTimeAfterTick;\n\n    if (getMinutes(worldTimeMs) !== getMinutes(worldTimeAfterTick)) {\n      onSimulationMinuteTick(worldTimeAfterTick);\n    }\n    // There's currently no good way of propagating globally calculated information besides using unsafe javascript and piggybacking on global objects.\n    // The alternatives are setState and contexts, but that's a really big performance hit.\n  });\n\n  return (\n    <>\n      <OrbitControls />\n      <Sun />\n      <Globe />\n      {flightsList.map((flight) => {\n        const from = airportsMap[flight.departureAirportId];\n        const to = airportsMap[flight.arrivalAirportId];\n        const selected = selectedFlight?.id === flight.id;\n        return (\n          <Flight\n            key={flight.id}\n            flight={flight}\n            from={from}\n            to={to}\n            selected={selected}\n            onFlightClicked={() => setSelectedFlight(flight)}\n          />\n        );\n      })}\n      {airportsList.map((airport) => {\n        return <Airport key={airport.id} airport={airport} />;\n      })}\n    </>\n  );\n}\n","import { useEffect, useState } from 'react';\n\nimport { prettyDate } from '../Utilities';\n\nimport { Dictionary, IAirport, IFlight } from '../types';\n\ntype FilterControlProps = {\n  flights: IFlight[];\n  airports: IAirport[];\n  airportMap: Dictionary<IAirport>;\n  simulationTime: number;\n  maxFlightCount: number;\n  selectedFlight: IFlight | null;\n  setSelectedFlight: (flight: IFlight | null) => void;\n  onFilteringChanged: (airports: IFlight[]) => void;\n};\n\nconst isInFlightNow = (flight: IFlight, worldTime: number) => {\n  const from = Number(flight.departureTime);\n  const to = Number(flight.arrivalTime);\n  return from < worldTime && worldTime < to;\n};\n\nexport function FlightFilterControls({\n  flights,\n  airports,\n  airportMap,\n  onFilteringChanged,\n  simulationTime,\n  maxFlightCount,\n  selectedFlight,\n  setSelectedFlight,\n}: FilterControlProps) {\n  const [departureFilter, setDepartureFilter] = useState<string>('');\n  const [arrivalFilter, setArrivalFilter] = useState<string>('');\n  const [flightIdFilter, setFlightIdFilter] = useState<string>('');\n  const [activeFlightFilter, setActiveFlightFilter] = useState<boolean>(true);\n\n  const [filteredFlights, setFilteredFlights] = useState<IFlight[]>(flights);\n\n  useEffect(() => {\n    const filtered = flights\n      .filter((flight) => {\n        return (\n          flight.departureAirportId.includes(departureFilter) &&\n          flight.arrivalAirportId.includes(arrivalFilter) &&\n          flight.id.includes(flightIdFilter) &&\n          (!activeFlightFilter || isInFlightNow(flight, simulationTime))\n        );\n      })\n      .slice(0, maxFlightCount);\n\n    setFilteredFlights(filtered);\n    onFilteringChanged(filtered);\n  }, [\n    departureFilter,\n    arrivalFilter,\n    flightIdFilter,\n    activeFlightFilter,\n    flights,\n    onFilteringChanged,\n    simulationTime,\n    maxFlightCount,\n  ]);\n\n  return (\n    <div className=\"flightFilterControls\">\n      <table>\n        <thead className=\"flight-row-header\">\n          <tr>\n            <td>Flight</td>\n            <td>Departure time</td>\n            <td>Departure airport</td>\n            <td>Destination airport</td>\n            <td>Expected arrival</td>\n            <td>Visible</td>\n          </tr>\n        </thead>\n        <thead>\n          <tr>\n            <td>\n              <input type=\"text\" value={flightIdFilter} onChange={(e) => setFlightIdFilter(e.target.value)} />\n            </td>\n            <td>\n              <span>Is currently flying:</span>\n              <input\n                type=\"checkbox\"\n                checked={activeFlightFilter}\n                onChange={(e) => setActiveFlightFilter(e.target.checked)}\n              />\n            </td>\n            <td>\n              <select onChange={(e) => setDepartureFilter(e.target.value)}>\n                <option value=\"\">ALL</option>\n                {airports.map(({ id, city }) => (\n                  <option key={id} value={id}>\n                    [{id}]{city}\n                  </option>\n                ))}\n              </select>\n            </td>\n            <td>\n              <select onChange={(e) => setArrivalFilter(e.target.value)}>\n                <option value=\"\">ALL</option>\n                {airports.map(({ id, city }) => (\n                  <option key={id} value={id}>\n                    [{id}]{city}\n                  </option>\n                ))}\n              </select>\n            </td>\n            <td>Expected arrival</td>\n          </tr>\n        </thead>\n        <tbody>\n          {filteredFlights.map((flight, idx) => {\n            const isSelected = flight.id === selectedFlight?.id;\n            const classNames = [\n              'flight-row',\n              idx % 2 ? 'flight-row-even' : 'flight-row-odd',\n              isSelected ? 'flight-row-selected' : '',\n            ].join(' ');\n            return (\n              <tr key={flight.id} className={classNames} onClick={() => setSelectedFlight(flight)}>\n                <td>{flight.id}</td>\n                <td>{prettyDate(flight.departureTime)}</td>\n                <td>{airportMap[flight.departureAirportId].city}</td>\n                <td>{airportMap[flight.arrivalAirportId].city}</td>\n                <td>{prettyDate(flight.arrivalTime)}</td>\n                <td>{idx < maxFlightCount ? 'Yes✅' : 'No❌'}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","import { ChangeEvent, useState } from 'react';\n\nexport function SimulationSpeedControl({ onSimulationSpeedChange }: { onSimulationSpeedChange: (s: number) => void }) {\n  const [speed, setSpeed] = useState<number>(1);\n\n  const updateAndPublish = (event: ChangeEvent<HTMLInputElement>) => {\n    const spd = event.target.value as any;\n    setSpeed(spd);\n    onSimulationSpeedChange(10 ** spd);\n  };\n\n  return (\n    <div>\n      <div>\n        Speed: {speed}x | (1 minute = 10^{speed} (={10 ** speed}) simulation minutes)\n      </div>\n      <input type=\"range\" min={0} max={4} step={1} value={speed} onChange={updateAndPublish} />\n    </div>\n  );\n}\n\nexport function SimulationSizeControl({ onMaxFlightCountChange }: { onMaxFlightCountChange: (s: number) => void }) {\n  const [flightCount, setFlightCount] = useState<number>(10);\n\n  const updateAndPublish = (event: ChangeEvent<HTMLInputElement>) => {\n    const count = event.target.value as any;\n    setFlightCount(count);\n    onMaxFlightCountChange(count);\n  };\n\n  return (\n    <div>\n      <div>Max rendered flights: {flightCount}</div>\n      <input type=\"range\" min={1} max={500} step={1} value={flightCount} onChange={updateAndPublish} />\n    </div>\n  );\n}\n","import './App.css';\n\nimport React, { useEffect, useState } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport FlightsScene from './flightsScene/FlightsScene';\nimport { Dictionary, IAirport, IFlight } from './types';\nimport { indexBy } from 'ramda';\nimport { parseFlightDates, prettyDate } from './Utilities';\nimport { FlightFilterControls } from './components/FilterControls';\nimport { SimulationSizeControl, SimulationSpeedControl } from './components/SimulationControls';\n\nconst date = Date.now();\n\nfunction FlightVisualizationApp() {\n  const [flightsList, setFlightsList] = useState<IFlight[]>([]);\n  const [airportsMap, setAirportsMap] = useState<Dictionary<IAirport>>({});\n  const [airportsList, setAirportList] = useState<IAirport[]>([]);\n\n  useEffect(() => {\n    fetch('/data/airports.json', {})\n      .then((airportsResponse) => airportsResponse.json())\n      .then((airportsJson: IAirport[]) => {\n        const airportsMap = indexBy((e) => e.id, airportsJson);\n\n        setAirportsMap(airportsMap);\n        setAirportList(airportsJson);\n      });\n  }, []);\n\n  useEffect(() => {\n    fetch('/data/flights.json', {})\n      .then((flightsResponse) => flightsResponse.json())\n      .then((flightsJson) => flightsJson.map(parseFlightDates))\n      .then((flightsJson: IFlight[]) => setFlightsList(flightsJson));\n  }, []);\n\n  const [selectedFlight, setSelectedFlight] = useState<IFlight | null>(null);\n  const [filteredFlights, setFilteredFlights] = useState<IFlight[]>([]);\n  const [maxFlightCount, setMaxFlightCount] = useState(20);\n  const [simulationSpeed, setSimulationSpeed] = useState(1);\n  const [simulationTime, setSimulationTime] = useState(date);\n\n  return (\n    <div className=\"App\">\n      <aside className=\"controlPanel\">\n        <div className=\"input-controls\">\n          <div>Current date: {prettyDate(new Date(simulationTime))}</div>\n          <SimulationSizeControl onMaxFlightCountChange={setMaxFlightCount} />\n          <SimulationSpeedControl onSimulationSpeedChange={setSimulationSpeed} />\n        </div>\n        <hr />\n        <FlightFilterControls\n          flights={flightsList}\n          airports={airportsList}\n          airportMap={airportsMap}\n          maxFlightCount={maxFlightCount}\n          simulationTime={simulationTime}\n          selectedFlight={selectedFlight}\n          setSelectedFlight={setSelectedFlight}\n          onFilteringChanged={setFilteredFlights}\n        />\n      </aside>\n      <React.Suspense fallback={<div>Loading data...ð</div>}>\n        <Canvas id=\"canvas\">\n          <FlightsScene\n            flightsList={filteredFlights}\n            airportsList={airportsList}\n            airportsMap={airportsMap}\n            selectedFlight={selectedFlight}\n            setSelectedFlight={setSelectedFlight}\n            simulationSpeed={simulationSpeed}\n            onSimulationMinuteTick={setSimulationTime}\n          />\n        </Canvas>\n      </React.Suspense>\n    </div>\n  );\n}\n\nexport default FlightVisualizationApp;\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport FlightVisualizationApp from './FlightVisualizationApp';\n\nReactDOM.render(\n  <React.StrictMode>\n    <FlightVisualizationApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}